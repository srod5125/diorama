naming convention for branches:
    features: f_name_[version]
    issues  : i_issueNum_[description]

    issue in feature: f_name_[version]/i_issueNum_description
    sub feature : f_name_[version]/f_name_[version]
    issue in sub feature f_name_[version]/f_name_[version]/i_issueNum_[description]


----- copilots approach to assignment

from z3 import *

# Define variables
x, y = Ints('x y')
s = Solver()
s.add(x - y > 2, x > 3, y < 4)

# Check if the constraints are satisfiable
if s.check() == sat:
    m = s.model()
    print(f"Original model: x = {m[x]}, y = {m[y]}")

    # Substitute x with a new value (e.g., 10)
    F1 = x - y < 2
    substituted_F1 = substitute(F1, (x, IntVal(10)))
    print(f"Substituted F1 with x = 10: {substituted_F1}")

    # Replace x and y with values assigned by the model
    substituted_F1_model = substitute(F1, (x, m[x]), (y, m[y]))
    print(f"Substituted F1 with model values: {substituted_F1_model}")
else:
    print("UNSAT")
----------
Equality and Uninterpreted Functions (EUF) is a fundamental theory in Z3 that allows reasoning about equality constraints and uninterpreted functions. Here are the key points about EUF in Z3:
Uninterpreted Functions and Constants

    Uninterpreted functions and constants are declared using the Function and Const commands in Z3

.
They represent symbols with no predefined interpretation, allowing any interpretation that is consistent with the constraints over the function or constant
.
For example, f = Function('f', IntSort(), IntSort()) declares an uninterpreted function f that takes an integer argument and returns an integer

    .

Congruence Rule

    The most important rule to connect terms in EUF is the congruence rule: s1=t1 ... sn=tn (Congruence) f(s1, ..., sn) = f(t1, ..., tn)

It states that two function applications are equal if the functions are the same and their corresponding arguments are equal

    .

Solving EUF Constraints

    Z3 can solve EUF constraints by finding an interpretation (model) that satisfies the given constraints

.
For example, solve(f(f(x)) == x, f(x) == y, x != y) finds a model where f(0) is 1, f(1) is 0, and f(a) is 1 for all a different from 0 and 1

    .

Applications of EUF

    EUF is often used to prove the equivalence of different implementations of the same algorithms

.
It can also be used to abstract complex functions in programs by replacing them with uninterpreted functions, making it easier to reason about the programs
.
Replacing interpreted functions with uninterpreted functions weakens the formula, so ϕUF → ϕ holds, where ϕUF is ϕ with some functions replaced by uninterpreted functions

    .

In summary, EUF in Z3 provides a way to reason about equality constraints and uninterpreted functions, which is useful for proving program equivalence, abstracting complex functions, and solving constraints involving equality and uninterpreted symbols.


https://docs.rs/z3tracer/latest/z3tracer/




zip citation:
https://stackoverflow.com/questions/5764782/iterate-through-adjacent-pairs-of-items-in-a-python-list


functions are declared, with domain & ranges then you construct the terms, finially in the solver assert that the function eqals the term, that way its invocation always corresponds with its application

where_blocks => function, function = then_blocks


perplexity: make linear temporal logic using cvc5
----
from cvc5 import Solver, Kind

solver = Solver()

# Define sorts
time_sort = solver.getIntegerSort()
bool_sort = solver.getBooleanSort()

# Define time variable
t = solver.mkVar(time_sort, "t")

# Define atomic propositions as unary predicates over time
p = solver.mkFunctionDecl("p", [time_sort], bool_sort)
q = solver.mkFunctionDecl("q", [time_sort], bool_sort)

# Define LTL operators
def G(phi):
    return solver.mkTerm(Kind.FORALL,
                         [solver.mkVar(time_sort, "t1")],
                         solver.mkTerm(Kind.IMPLIES,
                                       solver.mkTerm(Kind.GEQ, solver.mkVar(time_sort, "t1"), t),
                                       phi(solver.mkVar(time_sort, "t1"))))

def F(phi):
    return solver.mkTerm(Kind.EXISTS,
                         [solver.mkVar(time_sort, "t1")],
                         solver.mkTerm(Kind.AND,
                                       solver.mkTerm(Kind.GEQ, solver.mkVar(time_sort, "t1"), t),
                                       phi(solver.mkVar(time_sort, "t1"))))

def X(phi):
    return phi(solver.mkTerm(Kind.PLUS, t, solver.mkInteger(1)))

def U(phi, psi):
    return solver.mkTerm(Kind.EXISTS,
                         [solver.mkVar(time_sort, "t1")],
                         solver.mkTerm(Kind.AND,
                                       solver.mkTerm(Kind.GEQ, solver.mkVar(time_sort, "t1"), t),
                                       psi(solver.mkVar(time_sort, "t1")),
                                       solver.mkTerm(Kind.FORALL,
                                                     [solver.mkVar(time_sort, "t2")],
                                                     solver.mkTerm(Kind.IMPLIES,
                                                                   solver.mkTerm(Kind.AND,
                                                                                 solver.mkTerm(Kind.GEQ, solver.mkVar(time_sort, "t2"), t),
                                                                                 solver.mkTerm(Kind.LT, solver.mkVar(time_sort, "t2"), solver.mkVar(time_sort, "t1"))),
                                                                   phi(solver.mkVar(time_sort, "t2"))))))

# Example: Encode G(p -> F(q))
ltl_property = G(lambda t: solver.mkTerm(Kind.IMPLIES,
                                         solver.mkTerm(Kind.APPLY_UF, p, t),
                                         F(lambda t1: solver.mkTerm(Kind.APPLY_UF, q, t1))))

# Assert the LTL property
solver.assertFormula(ltl_property)

# Check satisfiability
result = solver.checkSat()
print("Satisfiability:", result)

if result.isSat():
    print("Model:")
    print("p(0) =", solver.getValue(solver.mkTerm(Kind.APPLY_UF, p, solver.mkInteger(0))))
    print("q(0) =", solver.getValue(solver.mkTerm(Kind.APPLY_UF, q, solver.mkInteger(0))))
    print("p(1) =", solver.getValue(solver.mkTerm(Kind.APPLY_UF, p, solver.mkInteger(1))))
    print("q(1) =", solver.getValue(solver.mkTerm(Kind.APPLY_UF, q, solver.mkInteger(1))))

----

#include <cvc5/cvc5.h>
#include <iostream>

using namespace cvc5;

class LTLEncoder {
private:
    Solver& slv;
    Term time;
    Sort boolSort;
    Sort intSort;

public:
    LTLEncoder(Solver& s) : slv(s) {
        boolSort = slv.getBooleanSort();
        intSort = slv.getIntegerSort();
        time = slv.mkVar(intSort, "time");
    }

    Term Next(Term f) {
        Term t = slv.mkVar(intSort, "t");
        return slv.mkTerm(Kind::LAMBDA, {t,
            slv.mkTerm(Kind::EQUAL,
                slv.mkTerm(Kind::APPLY_UF, f, slv.mkTerm(Kind::ADD, t, slv.mkInteger(1))),
                slv.mkBoolean(true))});
    }

    Term Until(Term f, Term g) {
        Term t = slv.mkVar(intSort, "t");
        Term untilFunc = slv.mkVar(slv.mkFunctionSort({intSort}, boolSort), "until");

        Term untilDef = slv.mkTerm(Kind::EQUAL, untilFunc,
            slv.mkTerm(Kind::LAMBDA, {t},
                slv.mkTerm(Kind::OR,
                    slv.mkTerm(Kind::APPLY_UF, g, t),
                    slv.mkTerm(Kind::AND,
                        slv.mkTerm(Kind::APPLY_UF, f, t),
                        slv.mkTerm(Kind::APPLY_UF, untilFunc, slv.mkTerm(Kind::ADD, t, slv.mkInteger(1)))))));

        slv.assertFormula(untilDef);
        return untilFunc;
    }
};

int main() {
    Solver slv;

    slv.setLogic("QF_UFLIA");  // Quantifier-free linear integer arithmetic with uninterpreted functions

    LTLEncoder ltl(slv);

    // Example: encode "Next p"
    Term p = slv.mkVar(slv.mkFunctionSort({slv.getIntegerSort()}, slv.getBooleanSort()), "p");
    Term nextP = ltl.Next(p);

    // Example: encode "p Until q"
    Term q = slv.mkVar(slv.mkFunctionSort({slv.getIntegerSort()}, slv.getBooleanSort()), "q");
    Term pUntilQ = ltl.Until(p, q);

    // Create an assertion
    Term t = slv.mkVar(slv.getIntegerSort(), "t");
    slv.assertFormula(slv.mkTerm(Kind::APPLY_UF, nextP, t));
    slv.assertFormula(slv.mkTerm(Kind::APPLY_UF, pUntilQ, t));

    // Check satisfiability
    Result result = slv.checkSat();
    std::cout << "Result: " << result << std::endl;

    return 0;
}



----
func(members) -> members
            func(members) -> true

----

introduce an init & halt state along with member states
replace implies in rule with recursive lambda that applies
then block for some when block for lambda + if-then-else kind
defineFunsRec

----

vector of vars

node where each node is a range of states
construct a node, find all derivable paths
if vars within node are the same, expand or contract the
constraints of each var,
if vars differ create new node, repeat

create recurive structure,
assume endpoint is true and false, one for each,
where an endpoint is the query or final state
perform induction,
pattern match over iductive form to if assumtion holds


------


cfg -> dataflow analysis
do symbolic data flow analysis
each time a new series of tokens or terms is appended to a block set
compress the block via the grammar
do so until fized point is reached
to unravel repeat blocks will be evaluated one step as a base case in order to
get invariant
finialy for a given quere: work backwards,
instead of going forward through the stategraph in order to read a desiered state
go back wards from target state to inital state
